include:
- template: Security/Dependency-Scanning.gitlab-ci.yml
- template: Security/License-Scanning.gitlab-ci.yml
- template: Security/SAST.gitlab-ci.yml
- template: Security/Secret-Detection.gitlab-ci.yml

image: node:12

stages:
- setup
- test
- docker
- deploy
- release

workflow:
  rules:
  - if: $CI_MERGE_REQUEST_ID
  - if: $CI_COMMIT_BRANCH == "master"
  - if: $CI_COMMIT_TAG =~ /^v[0-9]+\.[0-9]+\.[0-9]+$/

cache:
  key: "$CI_COMMIT_REF_SLUG"
  paths:
  - node_modules/

setup-js:
  stage: setup
  script:
  - npm install

test-js:
  stage: test
  script:
  - npm run test

lint-js:
  stage: test
  script:
  - npm run lint

audit-js:
  stage: test
  script:
  - npm audit

site-generation:
  stage: test
  script:
  - ./bin/kuvia.js -o kuvia.html -r -d example

.docker-job:
  image: docker:latest
  services:
  - docker:dind
  before_script:
  - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY

build-docker:
  stage: docker
  extends: .docker-job
  variables:
    CONTAINER_IMAGE: "$CI_REGISTRY_IMAGE:$CI_COMMIT_SHA"
  script:
  - docker build -t $CONTAINER_IMAGE .
  - docker run --rm $CONTAINER_IMAGE
  - docker push $CONTAINER_IMAGE

pages:
  stage: deploy
  before_script:
  - mkdir -p public
  script:
  - cp -r example public/
  - cd public/example/
  - ../../bin/kuvia.js -o index.html -r -d . --no-min
  artifacts:
    paths:
    - public
  rules:
  - if: $CI_COMMIT_BRANCH == "master"

release-npm:
  stage: release
  before_script:
  - npm config set //registry.npmjs.org/:_authToken ${NPM_TOKEN}
  script:
  - npm publish
  rules:
  - if: $CI_COMMIT_TAG =~ /^v[0-9]+\.[0-9]+\.[0-9]+$/

release-gitlab:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  script:
  - release-cli create --name "Release ${CI_COMMIT_TAG}" --tag-name ${CI_COMMIT_TAG}
  rules:
  - if: $CI_COMMIT_TAG =~ /^v[0-9]+\.[0-9]+\.[0-9]+$/

release-docker-latest:
  stage: release
  extends: .docker-job
  variables:
    CONTAINER_IMAGE: "$CI_REGISTRY_IMAGE:$CI_COMMIT_SHA"
    CONTAINER_IMAGE_RELEASE: "$CI_REGISTRY_IMAGE:latest"
  script:
  - docker pull $CONTAINER_IMAGE
  - docker tag $CONTAINER_IMAGE $CONTAINER_IMAGE_RELEASE
  - docker push $CONTAINER_IMAGE_RELEASE
  rules:
  - if: $CI_COMMIT_BRANCH == "master"

release-docker-tagged:
  stage: release
  extends: .docker-job
  variables:
    CONTAINER_IMAGE: "$CI_REGISTRY_IMAGE:$CI_COMMIT_SHA"
  script:
  - "export IMAGE_VERSION=${CI_COMMIT_TAG:1}"
  - "export CONTAINER_IMAGE_RELEASE=$CI_REGISTRY_IMAGE:$IMAGE_VERSION"
  - docker pull $CONTAINER_IMAGE
  - docker tag $CONTAINER_IMAGE $CONTAINER_IMAGE_RELEASE
  - docker push $CONTAINER_IMAGE_RELEASE
  rules:
  - if: $CI_COMMIT_TAG =~ /^v[0-9]+\.[0-9]+\.[0-9]+$/
